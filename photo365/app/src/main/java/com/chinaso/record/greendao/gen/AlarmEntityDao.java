package com.chinaso.record.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinaso.record.entity.AlarmEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_ENTITY".
*/
public class AlarmEntityDao extends AbstractDao<AlarmEntity, Long> {

    public static final String TABLENAME = "ALARM_ENTITY";

    /**
     * Properties of entity AlarmEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hour = new Property(1, int.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(2, int.class, "minute", false, "MINUTE");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property CycleTag = new Property(4, int.class, "cycleTag", false, "CYCLE_TAG");
        public final static Property CycleWeeks = new Property(5, String.class, "cycleWeeks", false, "CYCLE_WEEKS");
        public final static Property BellMode = new Property(6, int.class, "bellMode", false, "BELL_MODE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property IsOpen = new Property(8, boolean.class, "isOpen", false, "IS_OPEN");
    }


    public AlarmEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HOUR\" INTEGER NOT NULL ," + // 1: hour
                "\"MINUTE\" INTEGER NOT NULL ," + // 2: minute
                "\"TITLE\" TEXT," + // 3: title
                "\"CYCLE_TAG\" INTEGER NOT NULL ," + // 4: cycleTag
                "\"CYCLE_WEEKS\" TEXT," + // 5: cycleWeeks
                "\"BELL_MODE\" INTEGER NOT NULL ," + // 6: bellMode
                "\"REMARK\" TEXT," + // 7: remark
                "\"IS_OPEN\" INTEGER NOT NULL );"); // 8: isOpen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHour());
        stmt.bindLong(3, entity.getMinute());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getCycleTag());
 
        String cycleWeeks = entity.getCycleWeeks();
        if (cycleWeeks != null) {
            stmt.bindString(6, cycleWeeks);
        }
        stmt.bindLong(7, entity.getBellMode());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getIsOpen() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHour());
        stmt.bindLong(3, entity.getMinute());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getCycleTag());
 
        String cycleWeeks = entity.getCycleWeeks();
        if (cycleWeeks != null) {
            stmt.bindString(6, cycleWeeks);
        }
        stmt.bindLong(7, entity.getBellMode());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getIsOpen() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmEntity readEntity(Cursor cursor, int offset) {
        AlarmEntity entity = new AlarmEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // hour
            cursor.getInt(offset + 2), // minute
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // cycleTag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cycleWeeks
            cursor.getInt(offset + 6), // bellMode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.getShort(offset + 8) != 0 // isOpen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHour(cursor.getInt(offset + 1));
        entity.setMinute(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCycleTag(cursor.getInt(offset + 4));
        entity.setCycleWeeks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBellMode(cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsOpen(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
