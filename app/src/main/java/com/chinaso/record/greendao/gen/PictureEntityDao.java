package com.chinaso.record.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chinaso.record.entity.PhotoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICTURE_ENTITY".
*/
public class PictureEntityDao extends AbstractDao<PhotoEntity, Long> {

    public static final String TABLENAME = "PICTURE_ENTITY";

    /**
     * Properties of entity PhotoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PicturePath = new Property(1, String.class, "picturePath", false, "PICTURE_PATH");
        public final static Property PictureDate = new Property(2, String.class, "pictureDate", false, "PICTURE_DATE");
        public final static Property PictureInfo = new Property(3, String.class, "pictureInfo", false, "PICTURE_INFO");
    }


    public PictureEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PictureEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICTURE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PICTURE_PATH\" TEXT," + // 1: picturePath
                "\"PICTURE_DATE\" TEXT," + // 2: pictureDate
                "\"PICTURE_INFO\" TEXT);"); // 3: pictureInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String picturePath = entity.getPhotoPath();
        if (picturePath != null) {
            stmt.bindString(2, picturePath);
        }
 
        String pictureDate = entity.getPhotoDate();
        if (pictureDate != null) {
            stmt.bindString(3, pictureDate);
        }
 
        String pictureInfo = entity.getPhotoInfo();
        if (pictureInfo != null) {
            stmt.bindString(4, pictureInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String picturePath = entity.getPhotoPath();
        if (picturePath != null) {
            stmt.bindString(2, picturePath);
        }
 
        String pictureDate = entity.getPhotoDate();
        if (pictureDate != null) {
            stmt.bindString(3, pictureDate);
        }
 
        String pictureInfo = entity.getPhotoInfo();
        if (pictureInfo != null) {
            stmt.bindString(4, pictureInfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoEntity readEntity(Cursor cursor, int offset) {
        PhotoEntity entity = new PhotoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // picturePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pictureDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // pictureInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotoPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhotoDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhotoInfo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
